/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    LOMA: Nextflow config file for defining module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {

// RUN_QC
    withName: FETCH_FASTQ {
        errorStrategy = 'ignore'
//        ext.args = { "${params.FETCH_FASTQ.args}" }
    }
    withName: FETCH_SEQSUM {
        errorStrategy = 'ignore'
//        ext.args = { "${params.FETCH_SEQSUM.args}" }
    }
    withName: PYCOQC {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta}" }
        publishDir = [path: {"${params.outdir}/${meta}/run_QC/pycoqc/"}, mode: 'copy']
        ext.args = { "${params.PYCOQC.args}" }
    }


// READ_QC
    withName: 'NANOPLOT_PREQC' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.preqc." }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/read_QC/preqc/html/"}, pattern: "*.preqc.*.html", mode: 'copy']
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/read_QC/preqc/png/"}, pattern: "*.preqc.*.png", mode: 'copy']
        ext.args = { "--raw -p preqc ${params.NANOPLOT_PREQC.args}" }
    }
    withName: SEQTK_FQCHK_PREQC {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.preqc" }
        ext.args = { "${params.SEQTK_FQCHK_PREQC.args}" }
    }
    withName: 'PORECHOP_PORECHOP' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.trimmed" }
        ext.args = { "${params.PORECHOP_PORECHOP.args}" }
    }
    withName: 'FILTLONG' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.filtered" }
        ext.args = { "--min_length ${params.FILTLONG.min_length} -p ${params.FILTLONG.keep_percent} ${params.FILTLONG.args}" }
    }


// READ_DECONTAMINATION
    withName: 'MINIMAP2_ALIGN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.aligned" }
        ext.args = { "${params.MINIMAP2_ALIGN.args}" }
    }
    withName: 'FILTER_MAPPED' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.filtermapped" }
        ext.args = { "${params.FILTER_MAPPED.args}" }
    }
    withName: KRAKEN2_HOST {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.kraken2_host" }
        ext.args = { "${params.KRAKEN2_HOST.args}" }
    }
    withName: 'FILTER_READLIST' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.filtereadlist" }
        ext.args = { "${params.FILTER_READLIST.args}" }
    }
     withName: SEQKIT_GREP {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.decontaminated" }
        ext.args = { "-n -v ${params.SEQKIT_GREP.args}" }
     }
    withName: 'NANOPLOT_POSTQC' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.postqc." }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/read_QC/postqc/html/"}, pattern: "*.postqc.*.html", mode: 'copy']
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/read_QC/postqc/png/"}, pattern: "*.postqc.*.png", mode: 'copy']
        ext.args = { "--raw -p postqc ${params.NANOPLOT_POSTQC.args}" }
    }
    withName: SEQTK_FQCHK_POSTQC {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.postqc" }
        ext.args = { "${params.SEQTK_FQCHK_POSTQC.args}" }
    }


// PLOT_READQC
    withName: 'PLOT_READQCMETRICS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.run_id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/"}, pattern: "*.html", mode: 'copy']
        ext.args = { "${params.PLOT_READQCMETRICS.args}" }
    }


// TAXONOMIC_PROFILING
    withName: 'KRAKEN2_TAXPROFILING' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/kraken2"}, pattern: "*.report.txt",  mode: 'copy']
        ext.args = { "${params.KRAKEN2_TAXPROFILING.args}" }
    }
    withName: 'TAXPASTA_STANDARDISE_KRAKEN2' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.taxpasta_kraken2" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/taxpasta"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "--profiler kraken2 --output '${task.ext.prefix}.tsv' --add-rank --add-name ${params.TAXPASTA_STANDARDISE_KRAKEN2.args}" }
    }
    withName: 'BRACKEN_KRAKEN2' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.bracken_kraken2" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/bracken"}, pattern: "*bracken*", mode: 'copy']
        ext.args = { "${params.BRACKEN_KRAKEN2.args}" }
    }
    withName: 'PLOT_KRAKEN2' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.kraken2" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/taxhits/"}, pattern: "*.html", mode: 'copy']
        ext.args = { "${params.PLOT_KRAKEN2.args}" }
    }
    withName: 'PLOT_KRAKEN2BRACKEN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.kraken2_bracken" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/taxhits/"}, pattern: "*.html", mode: 'copy']
        ext.args = { "${params.PLOT_KRAKEN2BRACKEN.args}" }
    }
    withName: 'SYLPH_PROFILE' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/sylph/"}, pattern: "*.sylph_results.tsv", mode: 'copy']
        ext.args = { "${params.SYLPH_PROFILE.args}" }
    }
    withName: 'SYLPH_SKETCH' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.sylph" }
        ext.args = { "${params.SYLPH_SKETCH.args}" }
    }
    withName: 'PLOT_SYLPH' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.sylph" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/taxhits/"}, pattern: "*.html", mode: 'copy']
        ext.args = { "${params.PLOT_SYLPH.args}" }
    }
    withName: 'CENTRIFUGER_CENTRIFUGER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.centrifuger_out" }
        ext.args = { "${params.CENTRIFUGER_CENTRIFUGER.args}" }
    }
    withName: 'CENTRIFUGER_KREPORT' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.centrifuger" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/centrifuger"},pattern: "*kreport*", mode: 'copy']
        ext.args = { "${params.CENTRIFUGER_KREPORT.args}" }
    }
    withName: 'BRACKEN_CENTRIFUGER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.bracken_centrifuger" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/bracken"}, pattern: "*bracken*" ,mode: 'copy']
        ext.args = { "${params.BRACKEN_CENTRIFUGER.args}" }
    }
    withName: 'TAXPASTA_STANDARDISE_CENTRIFUGER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.taxpasta_centrifuger" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/taxpasta"}, pattern: "*taxpasta*", mode: 'copy']
        ext.args = { "--profiler centrifuge --output '${task.ext.prefix}.tsv' --add-rank --add-name ${params.TAXPASTA_STANDARDISE_CENTRIFUGER.args}" }
    }
    withName: 'PLOT_CENTRIFUGER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.centrifuger" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/taxhits/"}, pattern: "*.html", mode: 'copy']
        ext.args = { "${params.PLOT_CENTRIFUGER.args}" }
    }
    withName: 'PLOT_CENTRIFUGERBRACKEN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.centrifuger_bracken" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/taxhits/"}, pattern: "*.html", mode: 'copy']
        ext.args = { "${params.PLOT_CENTRIFUGERBRACKEN.args}" }
    }
    withName: 'PARSE_KRAKEN2HITS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/relevant_hits/"}, pattern: "*.target_species.tsv", mode: 'copy']
        ext.args = { "${params.PARSE_KRAKEN2HITS.args}" }
    }
    withName: 'PARSE_CENTRIFUGERHITS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/relevant_hits/"}, pattern: "*.target_species.tsv", mode: 'copy']
        ext.args = { "${params.PARSE_CENTRIFUGERHITS.args}" }
    }
    withName: 'PARSE_SYLPHHITS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/taxonomy/relevant_hits/"}, pattern: "*.target_species.tsv", mode: 'copy']
        ext.args = { "${params.PARSE_SYLPHHITS.args}" }
    }
    withName: 'PLOT_TAXHITS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.run_id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/"}, pattern: "*.html", mode: 'copy']
        ext.args = { "${params.PLOT_TAXHITS.args}" }
    }


//// ASSEMBLY
    withName: 'FLYE' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.flye" }
        ext.args = { "--meta ${params.FLYE.args}" }
    }
    withName: 'MINIMAP2_ALIGN_BIN_1' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.minimap_align1" }
        ext.args = { "${params.MINIMAP2_ALIGN_BIN_1.args}" }
    }
    withName: 'MINIMAP2_ALIGN_BIN_2' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.minimap_align2" }
        ext.args = { "${params.MINIMAP2_ALIGN_BIN_2.args}" }
    }
    withName: 'MINIMAP2_ALIGN_BIN_3' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.minimap_align3" }
        ext.args = { "${params.MINIMAP2_ALIGN_BIN_3.args}" }
    }
    withName: 'MINIMAP2_ALIGN_BIN_4' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.minimap_align4" }
        ext.args = { "${params.MINIMAP2_ALIGN_BIN_4.args}" }
    }
    withName: 'MINIMAP2_ALIGN_BIN_5' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.minimap_align5" }
        ext.args = { "${params.MINIMAP2_ALIGN_BIN_5.args}" }
    }
    withName: 'RACON_1' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.RACON1" }
        ext.args = { "-u ${params.RACON_1.args}" }
    }
    withName: 'RACON_2' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.RACON2" }
        ext.args = { "-u ${params.RACON_2.args}" }
    }
    withName: 'RACON_3' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.RACON3" }
        ext.args = { "-u ${params.RACON_3.args}" }
    }
    withName: 'RACON_4' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.RACON4" }
        ext.args = { "-u ${params.RACON_4.args}" }
    }
    withName: 'MEDAKA' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.medaka" }
        ext.args = { "${params.MEDAKA.args}" }
    }
    withName: SAMTOOLS_INDEX {
        errorStrategy = 'ignore'
        ext.args = { "${params.SAMTOOLS_INDEX.args}" }
    }



// ASSIGN BINS
    withName: TIARA_TIARA {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.tiara" }
        ext.args = { "${params.TIARA_TIARA.args}" }
    }
    withName: FILTER_CONTIGS {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.filtercontigs" }
        ext.args = { "${params.FILTER_CONTIGS.args}" }
    }
    withName: 'SEMIBIN_SINGLEEASYBIN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.semibin2" }
        ext.args = { "${params.SEMIBIN_SINGLEEASYBIN.args}" }
        ext.args3 = { "--sequencing-type=long_read --environment ${params.SEMIBIN_SINGLEEASYBIN.environment}" }
    }
    withName: 'SAMTOOLS_VIEW_1' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.samtoolsview" }
        ext.args = { "--output-fmt sam -h ${params.SAMTOOLS_VIEW_1.args}" }
    }
    withName: 'METADECODER_COVERAGE' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.metadecoder_cov" }
        ext.args = { "${params.METADECODER_COVERAGE.args}" }
    }
    withName: 'METADECODER_SEED' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.metadecoder_seed" }
        ext.args = { "${params.METADECODER_SEED.args}" }
    }
    withName: 'METADECODER_CLUSTER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.metadecoder_cluster" }
        ext.args = { "${params.METADECODER_CLUSTER.args}" }
    }
    withName: 'DASTOOL_FASTATOCONTIG2BIN_METADECODER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.metadecoder_clusters" }
        ext.args = { "${params.DASTOOL_FASTATOCONTIG2BIN_METADECODER.args}" }
    }
    withName: 'DASTOOL_FASTATOCONTIG2BIN_SEMIBIN2' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.semibin2_clusters" }
        ext.args = { "${params.DASTOOL_FASTATOCONTIG2BIN_SEMIBIN2.args}" }
    }
    withName: 'DASTOOL_DASTOOL' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.dastool" }
        ext.args = { "--score_threshold=${params.DASTOOL_DASTOOL.score_threshold} --write_bins ${params.DASTOOL_DASTOOL.args} --write_unbinned" }
    }
    withName: FETCH_UNBINNED {
        errorStrategy = 'ignore'
        ext.args = { "${params.FETCH_UNBINNED.args}" }
    }
    withName: RENAME_CONTIGS {
        errorStrategy = 'ignore'
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/"}, pattern: "*/*.fasta*", mode: 'copy']
        ext.args = { "${params.RENAME_CONTIGS.args}" }
    }


// CONTIG_QC
    withName: 'MINIMAP2_ALIGN_1' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.minimap_align1" }
        ext.args = { "${params.MINIMAP2_ALIGN_1.args}" }
    }
    withName: 'GENOMAD_ENDTOEND' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.geNomad" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/contig_qc/genomad"}, pattern: "*/*.complete*", mode: 'copy']
        ext.args = { "${params.GENOMAD_ENDTOEND.args}" }
    }
    withName: 'SKANI_SEARCH' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/contig_qc/skani"}, pattern: "*.skani_results.txt", mode: 'copy']
        ext.args = { "${params.SKANI_SEARCH.args}" }
    }
    withName: 'SEQKIT_FX2TAB' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.seqkit" }
        ext.args = { "-ngl -C N ${params.SEQKIT_FX2TAB.args}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/contig_qc/contig_stats/"}, mode: 'copy']
    }
//    withName: 'SAMTOOLS_INDEX_1' {
//        errorStrategy = 'ignore'
//        ext.prefix = { "${meta.id}" }
//        ext.args = { "${params.SAMTOOLS_INDEX_1.args}" }
//    }
    withName: 'SAMTOOLS_COVERAGE' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.coverage" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/contig_qc/coverage/"}, pattern: "*.coverage.txt", mode: 'copy']
        ext.args = { "${params.SAMTOOLS_COVERAGE.args}" }
    }


// BIN QC
    withName: 'CHECKM_LINEAGEWF' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.checkm" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/bin_QC/checkm"}, mode: 'copy', pattern: '*.tsv']
        ext.args = { "${params.CHECKM_LINEAGEWF.args}" }
    }
    withName: 'GTDBTK_CLASSIFYWF' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.gtdbtk" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/bin_QC/gtdbtk"}, mode: 'copy', pattern: '*.tsv']
        ext.args = { "--extension fasta ${params.GTDBTK_CLASSIFYWF.args}" }
    }
    withName: 'ASSEMBLY_STATS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.run_id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/bin_QC/assembly_stats"}, pattern: "*.csv", mode: 'copy']
        ext.args = { "${params.ASSEMBLY_STATS.args}" }
    }
    withName: 'PLOT_BINS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/"}, pattern: "*summary*", mode: 'copy']
        ext.args = { "${params.PLOT_BINS.args}" }
    }


// BIN_TAXONOMY
    withName: 'ASSIGN_TAXONOMY' {
        errorStrategy = 'ignore'
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/bin_QC/assign_taxonomy/"}, pattern: "*.txt", mode: 'copy']
        ext.args = { "${params.ASSIGN_TAXONOMY.args}" }
    }
    withName: 'FILTER_BAM' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.filtered" }
        ext.args = { "${params.FILTER_BAM.args}" }
    }
    withName: 'MEDAKA_MAG' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.medaka_mag" }
        ext.args = { "${params.MEDAKA_MAG.args}" }
    }


// PROKARYA_TYPING
//// AMR_TYPING
    withName: 'AMRFINDERPLUS_RUN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.filtered" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/amrfinderplus/"}, pattern: "*.tsv" , mode: 'copy']
        ext.args = { "${params.AMRFINDERPLUS_RUN.args}" }
    }
    withName: 'ABRICATE_RUN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.abricate" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/abricate/"}, pattern: "*.abricate.txt", mode: 'copy']
        ext.args = { "${params.ABRICATE_RUN.args}" }
    }
    withName: 'RGI_MAIN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.rgi" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/rgi/"}, pattern: "*rgi*", mode: 'copy']
        ext.args = { "${params.RGI_MAIN.args}" }
    }
    withName: 'RESFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.resfinder" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/resfinder/"}, pattern: "*.txt", mode: 'copy']
        ext.args = { "${params.RESFINDER.args}" }
    }
    withName: 'HAMRONIZATION_ABRICATE' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/hamronization/"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "${params.HAMRONIZATION_ABRICATE.args}" }
    }
    withName: 'HAMRONIZATION_RGI' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/hamronization/"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "${params.HAMRONIZATION_RGI.args}" }
    }
    withName: 'HAMRONIZATION_AMRFINDERPLUS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/hamronization/"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "${params.HAMRONIZATION_AMRFINDERPLUS.args}" }
    }
    withName: 'HAMRONIZATION_RESFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/hamronization/"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "${params.HAMRONIZATION_RESFINDER.args}" }
    }
    withName: 'HAMRONIZATION_POINTFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/hamronization/"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "${params.HAMRONIZATION_POINTFINDER.args}" }
    }
    withName: 'HAMRONIZATION_SUMMARIZE' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.summarize" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/hamronization/"}, pattern: '*.hamronization_combined_report.*', mode: 'copy']
        ext.args = { "${params.HAMRONIZATION_SUMMARIZE.args}" }
    }


// SEQUENCE_TYPING
    withName: 'MLST' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.mlst" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/mlst/mlst/"}, pattern: "*.tsv",mode: 'copy']
        ext.args = { "${params.MLST.args}" }
    }
    withName: 'CONVERT_MLSTTOCC' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.mlsttocc" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/mlst/mlst/"}, pattern: "*.tsv",mode: 'copy']
        ext.args = { "${params.CONVERT_MLSTTOCC.args}" }
    }
    withName: 'KROCUS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.krocus" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/mlst/krocus/"}, pattern: "*.tsv",mode: 'copy']
        ext.args = { "${params.KROCUS.args}" }
    }
    withName: 'CONVERT_KROCUSTOCC' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.krocustocc" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/mlst/krocus/"}, pattern: "*.tsv", mode: 'copy']
        ext.args = { "${params.CONVERT_KROCUSTOCC.args}" }
    }


// TARGETED_TYPING
    withName: 'PLASMIDFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.plasmidfinder" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/plasmidfinder/"}, pattern: "*plasmidfinder*", mode: 'copy']
        ext.args = { "${params.PLASMIDFINDER.args}" }
    }
    withName: 'VIRULENCEFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.plasmidfinder" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/virulencefinder/"}, mode: 'copy']
        ext.args = { "-x ${params.VIRULENCEFINDER.args}" }
    }
    withName: 'BLAST_BLASTN' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.blastn" }
        ext.args = { " -outfmt '6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore slen' ${params.BLASTN_BLASTN.args}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/blast/"}, pattern: "*blastn*", mode: 'copy']
    }
    withName: 'FILTER_BLAST' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.filterblast" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/blast/"}, mode: 'copy']
        ext.args = { "${params.FILTER_BLAST.args}" }
    }
    withName: 'GENEFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.genefinder" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/genefinder/"}, mode: 'copy']
        ext.args = { "${params.GENEFINDER.args}" }
    }
    withName: 'SUMMARIZE_GENEFINDING' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/genefinding/"}, mode: 'copy']
        ext.args = { "${params.SUMMARIZE_GENEFINDING.args}" }
    }

// ECOLI_TYPING
    withName: 'ECTYPER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.ectyper" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/ectyper"}, pattern: "*.ectyper.*", mode: 'copy']
        ext.args = { "${params.ECTYPER.args}" }
    }
    withName: 'STECFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.stecfinder" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/stecfinder"}, pattern: "*.stecfinder.tsv", mode: 'copy']
        ext.args = { "${params.STECFINDER.args}" }
    }
    withName: 'SHIGEIFINDER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.shigeifinder" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/shigeifinder"}, pattern: "*.shigeifinder.*", mode: 'copy']
        ext.args = { "${params.SHIGEIFINDER.args}" }
    }
    withName: 'MYKROBE_PREDICT_SSONNEI' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.mykrobe" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/mykrobe/"}, pattern: "*.ectyper.*", mode: 'copy']
        ext.args = { "${params.MYKROBE_PREDICT_SSONNEI.args}" }
    }
    withName: 'SHIGATYPER' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.shigatyper" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/shigatyper"}, pattern: "*.shigatyper.*", mode: 'copy']
        ext.args = { "${params.SHIGATYPER.args}" }
    }
    withName: 'FILTER_ECOLI' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/ecoli_typing"}, mode: 'copy']
        ext.args = { "${params.FILTER_ECOLI.args}" }
    }


// SALMONELLA_TYPING
    withName: 'MYKROBE_PREDICT_STYPHI' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.mykrobe" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/mykrobe/"}, mode: 'copy']
        ext.args = { "${params.MYKROBE_PREDICT_STYPHI.args}" }
    }
    withName: 'MYKROBE_PREDICT_SPARATYPHIB' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.mykrobe" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/mykrobe/"}, mode: 'copy']
        ext.args = { "${params.MYKROBE_PREDICT_SPARATYPHIB.args}" }
    }
    withName: 'SEQSERO2' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.seqsero2" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/seqsero2"}, mode: 'copy']
        ext.args = { "-m k -t 5 ${params.SEQOSEQ2.args}" }
    }
    withName: 'SISTR' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.sistr" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/sistr/"}, mode: 'copy']
        ext.args = { "${params.SISTR.args}" }
    }
    withName: 'FILTER_TYPING_SALMONELLA' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/salmonella_typing"}, mode: 'copy']
        ext.args = { "${params.FILTER_TYPING_SALMONELLA.args}" }
    }
    withName: 'FILTER_SALMONELLA' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/salmonella_typing"}, mode: 'copy']
        ext.args = { "${params.FILTER_SALMONELLA.args}" }
    }

// LMONOCYTOGENES_TYPING
    withName: 'LISSERO' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.bin}.lissero" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/assembly/typing/${meta.bin}/lissero/"}, mode: 'copy']
        ext.args = { "${params.LISSERO.args}" }
    }


// CREATE_REPORT
    withName: 'SUMMARIZE_RESULTS' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.run_id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/"}, mode: 'copy', pattern: "*summary*"]
        ext.args = { "${params.SUMMARIZE_RESULTS.args}" }
    }
    withName: 'SUMMARIZE_AMR' {
        errorStrategy = 'ignore'
        ext.prefix = { "${meta.id}.${meta.run_id}" }
        publishDir = [path: {"${params.outdir}/${meta.run_id}/${meta.id}/summary/"}, mode: 'copy', pattern: "*.html"]
        ext.args = { "${params.SUMMARIZE_AMR.args}" }
    }


// CUSTOM_DUMPSOFTWAREVERSIONS
    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        errorStrategy = 'ignore'
        publishDir = [path: {"${params.outdir}/logs/"}, mode: 'copy']
        ext.args = { "${params.CUSTOM_DUMPSOFTWAREVERSIONS.args}" }
    }


}
